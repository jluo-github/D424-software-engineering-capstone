
# FROM node:13-alpine
# ENV MONGO_DB_USERNAME=root \
#     MONGO_DB_PASSWORD=1234
# RUN mkdir -p /home/app
# # COPY . /home/app
# COPY ./app /home/app

# CMD ["node", "/home/app/server.js"]


# # run: docker file:
# # docker build -t my-app:1.0 .

# #  docker run  my-app:1.0

# # docker run -d -p 3000:3000 my-app:1.0

# # docker run -d -p 3000:3000 -e MONGO_DB_USERNAME=root -e MONGO_DB_PASSWORD=1234 my-app:1.0

# # docker run -d -p 3000:3000 -e MONGO_DB_USERNAME=root -e MONGO_DB_PASSWORD=1234 --name my-app my-app:1.0

# # docker run -d -p 3000:3000 -e MONGO_DB_USERNAME=root -e MONGO_DB_PASSWORD=1234 --name my-app --restart=always my-app:1.0

# # docker run -d -p 3000:3000 -e MONGO_DB_USERNAME=root -e MONGO_DB_PASSWORD=1234 --name my-app --restart=always -v /home/app/node_modules my-app:1.0


# # amazon ECR:
# # docker login 
# # $(aws ecr get-login --no-include-email --region eu-central)

# # docker pull somelongname
# # docker tag my-app:1.0 some-repo-url:5000/my-app:1.0

# # docker push some-repo-url:5000/my-app:1.0

# FROM node:19-alpine

# COPY package.json /app/
# COPY src /app/

# WORKDIR /app

# RUN npm install 

# CMD ["node", "server.js"]


# # run docker:
# # docker build -t my-app:1.0 .

# # docker images

# # docker run -d -p 3000:3000 my-app:1.0 

# # docker ps


# # backend java dockerfile:

# # syntax=docker/dockerfile:1

# FROM eclipse-temurin:17-jdk-jammy

# WORKDIR /app

# COPY .mvn/ .mvn
# COPY mvnw pom.xml ./
# RUN ./mvnw dependency:resolve

# COPY src ./src

# CMD ["./mvnw", "spring-boot:run"]


# # run docker on terminal:
# # docker build --tag java-docker .
# # docker images

# # with tag:
# # docker run -d -p 8080:8080 --name springboot-server java-docker
# # docker images

# # run java image as a container:
# # docker run -d -p 8080:8080 java-docker
# # curl --request GET \


# # Run a database in a container: 

# # Create your volumes now. You’ll create one for the data and one for configuration of MySQL.
# docker volume create mysql_data
# docker volume create mysql_config
# docker network create mysqlnet

# docker run -it --rm -d -v mysql_data:/var/lib/mysql \
# -v mysql_config:/etc/mysql/conf.d \
# --network mysqlnet \
# --name mysqlserver \
# -e MYSQL_USER=petclinic -e MYSQL_PASSWORD=petclinic \
# -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=petclinic \
# -p 3306:3306 mysql:8.0

# # Now that you have a running MySQL, update your Dockerfile to activate the MySQL Spring profile defined in the application and switch from an in-memory H2 database to the MySQL server you just created.

# # You only need to add the MySQL profile as an argument to the CMD definition.


# CMD ["./mvnw", "spring-boot:run", "-Dspring-boot.run.profiles=mysql"]

# # Build your image:

# # docker build --tag java-docker .



# # Now, run your container. This time, you need to set the MYSQL_URL environment variable so that your application knows what connection string to use to access the database. You’ll do this using the docker run command.

# docker run --rm -d \
# --name springboot-server \
# --network mysqlnet \
# -e MYSQL_URL=jdbc:mysql://mysqlserver/petclinic \
# -p 8080:8080 java-docker



# # ****************************************************************

# # syntax=docker/dockerfile:1

# FROM eclipse-temurin:17-jdk-jammy as base
# WORKDIR /app
# COPY .mvn/ .mvn
# COPY mvnw pom.xml ./
# RUN ./mvnw dependency:resolve
# COPY src ./src

# FROM base as development
# CMD ["./mvnw", "spring-boot:run", "-Dspring-boot.run.profiles=mysql", "-Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8000'"]

# FROM base as build
# RUN ./mvnw package

# FROM eclipse-temurin:17-jre-jammy as production
# EXPOSE 8080
# COPY --from=build /app/target/spring-petclinic-*.jar /spring-petclinic.jar
# CMD ["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", "/spring-petclinic.jar"]


# # Use Compose to develop locally
# # Open the petclinic in your IDE or a text editor and create a new file named docker-compose.dev.yml. 

# version: '3.8'
# services:
#   petclinic:
#     build:
#       context: .
#       target: development
#     ports:
#       - "8000:8000"
#       - "8080:8080"
#     environment:
#       - SERVER_PORT=8080
#       - MYSQL_URL=jdbc:mysql://mysqlserver/petclinic
#     volumes:
#       - ./:/app
#     depends_on:
#       - mysqlserver

#   mysqlserver:
#     image: mysql:8.0
#     ports:
#       - "3306:3306"
#     environment:
#       - MYSQL_ROOT_PASSWORD=
#       - MYSQL_ALLOW_EMPTY_PASSWORD=true
#       - MYSQL_USER=petclinic
#       - MYSQL_PASSWORD=petclinic
#       - MYSQL_DATABASE=petclinic
#     volumes:
#       - mysql_data:/var/lib/mysql
#       - mysql_config:/etc/mysql/conf.d
# volumes:
#   mysql_data:
#   mysql_config:



# # Now, to start your application and to confirm that it's running.

# docker compose -f docker-compose.dev.yml up --build
